library(fishmethods)
library(tidyverse)
# First bring in the raw data
dat.num <- readxl::read_xlsx("D:/Github/Haddock/Data/data_for_SPR.xlsx",sheet = "Num",col_types = c(rep('numeric',17),rep("guess",3)))
dat.num <- as.data.frame(dat.num)
dat.wa <- readxl::read_xlsx("D:/Github/Haddock/Data/data_for_SPR.xlsx",sheet = "WA",col_types = c(rep('numeric',17),rep("guess",3)))
dat.wa <- as.data.frame(dat.wa)
dat.m <- readxl::read_xlsx("D:/Github/Haddock/Data/data_for_SPR.xlsx",sheet = "M",col_types = c(rep('numeric',17),rep("guess",3)))
dat.m <- as.data.frame(dat.m)
dat.mat <- readxl::read_xlsx("D:/Github/Haddock/Data/data_for_SPR.xlsx",sheet = "maturity",col_types = c(rep('numeric',17),rep("guess",3)))
dat.mat <- as.data.frame(dat.mat)
# Now get the Recent/Pre-1993 in these...
dat.num$Period <- "Recent"
dat.wa$Period <- "Recent"
dat.m$Period <- "Recent"
dat.mat$Period <- "Recent"
# And everything before 1993...
dat.num$Period[dat.num$Year < 1993] <- "Pre 1993"
dat.wa$Period[dat.wa$Year < 1993] <- "Pre 1993"
dat.m$Period[dat.m$Year < 1993] <- "Pre 1993"
dat.mat$Period[dat.mat$Year < 1993] <- "Pre 1993"
# Now I want to take the above and get means of the time series for each Period and for each stock, the last bit replaces NaN's with NA's, noice!
num.period <- dat.num %>% dplyr::group_by(Location,Species,Period) %>% dplyr::summarise(A0 = mean(A0,na.rm=T),
A1 = mean(A1,na.rm=T),
A2 = mean(A2,na.rm=T),
A3 = mean(A3,na.rm=T),
A4 = mean(A4,na.rm=T),
A5 = mean(A5,na.rm=T),
A6 = mean(A6,na.rm=T),
A7 = mean(A7,na.rm=T),
A8 = mean(A8,na.rm=T),
A9 = mean(A9,na.rm=T),
A10 = mean(A10,na.rm=T),
A11= mean(A11,na.rm=T),
A12= mean(A12,na.rm=T),
A13 = mean(A13,na.rm=T),
A14 = mean(A14,na.rm=T),
A15 = mean(A15,na.rm=T))  %>% dplyr::mutate_all(~replace(., is.nan(.), NA))
mat.period <- dat.mat %>% dplyr::group_by(Location,Species,Period) %>% dplyr::summarise(A0 = mean(A0,na.rm=T),
A1 = mean(A1,na.rm=T),
A2 = mean(A2,na.rm=T),
A3 = mean(A3,na.rm=T),
A4 = mean(A4,na.rm=T),
A5 = mean(A5,na.rm=T),
A6 = mean(A6,na.rm=T),
A7 = mean(A7,na.rm=T),
A8 = mean(A8,na.rm=T),
A9 = mean(A9,na.rm=T),
A10 = mean(A10,na.rm=T),
A11= mean(A11,na.rm=T),
A12= mean(A12,na.rm=T),
A13 = mean(A13,na.rm=T),
A14 = mean(A14,na.rm=T),
A15 = mean(A15,na.rm=T))  %>% dplyr::mutate_all(~replace(., is.nan(.), NA))
m.period <- dat.m %>% dplyr::group_by(Location,Species,Period) %>% dplyr::summarise(A0 = mean(A0,na.rm=T),
A1 = mean(A1,na.rm=T),
A2 = mean(A2,na.rm=T),
A3 = mean(A3,na.rm=T),
A4 = mean(A4,na.rm=T),
A5 = mean(A5,na.rm=T),
A6 = mean(A6,na.rm=T),
A7 = mean(A7,na.rm=T),
A8 = mean(A8,na.rm=T),
A9 = mean(A9,na.rm=T),
A10 = mean(A10,na.rm=T),
A11= mean(A11,na.rm=T),
A12= mean(A12,na.rm=T),
A13 = mean(A13,na.rm=T),
A14 = mean(A14,na.rm=T),
A15 = mean(A15,na.rm=T))  %>% dplyr::mutate_all(~replace(., is.nan(.), NA))
wa.period <- dat.wa %>% dplyr::group_by(Location,Species,Period) %>% dplyr::summarise(A0 = mean(A0,na.rm=T),
A1 = mean(A1,na.rm=T),
A2 = mean(A2,na.rm=T),
A3 = mean(A3,na.rm=T),
A4 = mean(A4,na.rm=T),
A5 = mean(A5,na.rm=T),
A6 = mean(A6,na.rm=T),
A7 = mean(A7,na.rm=T),
A8 = mean(A8,na.rm=T),
A9 = mean(A9,na.rm=T),
A10 = mean(A10,na.rm=T),
A11= mean(A11,na.rm=T),
A12= mean(A12,na.rm=T),
A13 = mean(A13,na.rm=T),
A14 = mean(A14,na.rm=T),
A15 = mean(A15,na.rm=T))  %>% dplyr::mutate_all(~replace(., is.nan(.), NA))
species <- unique(num.period$Species)
n.species <- length(species)
locations <- unique(num.period$Location)
n.locations <- length(locations)
periods <- unique(num.period$Period)
n.periods <- length(periods)
count <- 0
res <- data.frame(Species = rep(NA,32),Location = rep(NA,32),Period = rep(NA,32),SBPR = rep(NA,32),M.avg = rep(NA,32))
i=1
j=1
k=1
# Massage our data how we need it.
num.tmp <- num.period %>% dplyr::filter(Species == species[i],Location == locations[j],Period == periods[k])
num.tmp <- num.tmp[as.logical(!is.na(num.tmp))][-(1:3)] %>% as.numeric()
wa.tmp <- wa.period %>% dplyr::filter(Species == species[i],Location == locations[j],Period == periods[k])
# Grab the ages before I strip them off
ages <- substr(names(wa.tmp[as.logical(!is.na(wa.tmp))][-(1:3) ]),2,3) %>% as.numeric()
wa.tmp <- wa.tmp[as.logical(!is.na(wa.tmp))][-(1:3) ]%>% as.numeric()
m.tmp <- m.period %>% dplyr::filter(Species == species[i],Location == locations[j],Period == periods[k])
m.tmp <- m.tmp[as.logical(!is.na(m.tmp))][-(1:3)]%>% as.numeric()
mat.tmp <- mat.period %>% dplyr::filter(Species == species[i],Location == locations[j],Period == periods[k])
mat.tmp <- mat.tmp[as.logical(!is.na(mat.tmp))][-(1:3)]%>% as.numeric()
ages
wa.tmp
rep(1,length(ages))
mat.tmp
m.tmp
?sbpr
library(fishmethods)
library(tidyverse)
# First bring in the raw data
dat.num <- readxl::read_xlsx("D:/Github/Haddock/Data/data_for_SPR.xlsx",sheet = "Num",col_types = c(rep('numeric',17),rep("guess",3)))
dat.num <- as.data.frame(dat.num)
dat.wa <- readxl::read_xlsx("D:/Github/Haddock/Data/data_for_SPR.xlsx",sheet = "WA",col_types = c(rep('numeric',17),rep("guess",3)))
dat.wa <- as.data.frame(dat.wa)
dat.m <- readxl::read_xlsx("D:/Github/Haddock/Data/data_for_SPR.xlsx",sheet = "M",col_types = c(rep('numeric',17),rep("guess",3)))
dat.m <- as.data.frame(dat.m)
dat.mat <- readxl::read_xlsx("D:/Github/Haddock/Data/data_for_SPR.xlsx",sheet = "maturity",col_types = c(rep('numeric',17),rep("guess",3)))
dat.mat <- as.data.frame(dat.mat)
# Now get the Recent/Pre-1993 in these...
dat.num$Period <- "Recent"
dat.wa$Period <- "Recent"
dat.m$Period <- "Recent"
dat.mat$Period <- "Recent"
# And everything before 1993...
dat.num$Period[dat.num$Year < 1993] <- "Pre 1993"
dat.wa$Period[dat.wa$Year < 1993] <- "Pre 1993"
dat.m$Period[dat.m$Year < 1993] <- "Pre 1993"
dat.mat$Period[dat.mat$Year < 1993] <- "Pre 1993"
# Now I want to take the above and get means of the time series for each Period and for each stock, the last bit replaces NaN's with NA's, noice!
num.period <- dat.num %>% dplyr::group_by(Location,Species,Period) %>% dplyr::summarise(A0 = mean(A0,na.rm=T),
A1 = mean(A1,na.rm=T),
A2 = mean(A2,na.rm=T),
A3 = mean(A3,na.rm=T),
A4 = mean(A4,na.rm=T),
A5 = mean(A5,na.rm=T),
A6 = mean(A6,na.rm=T),
A7 = mean(A7,na.rm=T),
A8 = mean(A8,na.rm=T),
A9 = mean(A9,na.rm=T),
A10 = mean(A10,na.rm=T),
A11= mean(A11,na.rm=T),
A12= mean(A12,na.rm=T),
A13 = mean(A13,na.rm=T),
A14 = mean(A14,na.rm=T),
A15 = mean(A15,na.rm=T))  %>% dplyr::mutate_all(~replace(., is.nan(.), NA))
mat.period <- dat.mat %>% dplyr::group_by(Location,Species,Period) %>% dplyr::summarise(A0 = mean(A0,na.rm=T),
A1 = mean(A1,na.rm=T),
A2 = mean(A2,na.rm=T),
A3 = mean(A3,na.rm=T),
A4 = mean(A4,na.rm=T),
A5 = mean(A5,na.rm=T),
A6 = mean(A6,na.rm=T),
A7 = mean(A7,na.rm=T),
A8 = mean(A8,na.rm=T),
A9 = mean(A9,na.rm=T),
A10 = mean(A10,na.rm=T),
A11= mean(A11,na.rm=T),
A12= mean(A12,na.rm=T),
A13 = mean(A13,na.rm=T),
A14 = mean(A14,na.rm=T),
A15 = mean(A15,na.rm=T))  %>% dplyr::mutate_all(~replace(., is.nan(.), NA))
m.period <- dat.m %>% dplyr::group_by(Location,Species,Period) %>% dplyr::summarise(A0 = mean(A0,na.rm=T),
A1 = mean(A1,na.rm=T),
A2 = mean(A2,na.rm=T),
A3 = mean(A3,na.rm=T),
A4 = mean(A4,na.rm=T),
A5 = mean(A5,na.rm=T),
A6 = mean(A6,na.rm=T),
A7 = mean(A7,na.rm=T),
A8 = mean(A8,na.rm=T),
A9 = mean(A9,na.rm=T),
A10 = mean(A10,na.rm=T),
A11= mean(A11,na.rm=T),
A12= mean(A12,na.rm=T),
A13 = mean(A13,na.rm=T),
A14 = mean(A14,na.rm=T),
A15 = mean(A15,na.rm=T))  %>% dplyr::mutate_all(~replace(., is.nan(.), NA))
wa.period <- dat.wa %>% dplyr::group_by(Location,Species,Period) %>% dplyr::summarise(A0 = mean(A0,na.rm=T),
A1 = mean(A1,na.rm=T),
A2 = mean(A2,na.rm=T),
A3 = mean(A3,na.rm=T),
A4 = mean(A4,na.rm=T),
A5 = mean(A5,na.rm=T),
A6 = mean(A6,na.rm=T),
A7 = mean(A7,na.rm=T),
A8 = mean(A8,na.rm=T),
A9 = mean(A9,na.rm=T),
A10 = mean(A10,na.rm=T),
A11= mean(A11,na.rm=T),
A12= mean(A12,na.rm=T),
A13 = mean(A13,na.rm=T),
A14 = mean(A14,na.rm=T),
A15 = mean(A15,na.rm=T))  %>% dplyr::mutate_all(~replace(., is.nan(.), NA))
species <- unique(num.period$Species)
n.species <- length(species)
locations <- unique(num.period$Location)
n.locations <- length(locations)
periods <- unique(num.period$Period)
n.periods <- length(periods)
count <- 0
res <- data.frame(Species = rep(NA,32),Location = rep(NA,32),Period = rep(NA,32),SBPR = rep(NA,32),M.avg = rep(NA,32))
for(i in 1:n.species)
{
for(j in 1:n.locations)
{
for(k in 1:n.periods)
{
count = count+1
if(locations[j] != "Irish Sea")
{
# Massage our data how we need it.
num.tmp <- num.period %>% dplyr::filter(Species == species[i],Location == locations[j],Period == periods[k])
num.tmp <- num.tmp[as.logical(!is.na(num.tmp))][-(1:3)] %>% as.numeric()
wa.tmp <- wa.period %>% dplyr::filter(Species == species[i],Location == locations[j],Period == periods[k])
# Grab the ages before I strip them off
ages <- substr(names(wa.tmp[as.logical(!is.na(wa.tmp))][-(1:3) ]),2,3) %>% as.numeric()
wa.tmp <- wa.tmp[as.logical(!is.na(wa.tmp))][-(1:3) ]%>% as.numeric()
m.tmp <- m.period %>% dplyr::filter(Species == species[i],Location == locations[j],Period == periods[k])
m.tmp <- m.tmp[as.logical(!is.na(m.tmp))][-(1:3)]%>% as.numeric()
mat.tmp <- mat.period %>% dplyr::filter(Species == species[i],Location == locations[j],Period == periods[k])
mat.tmp <- mat.tmp[as.logical(!is.na(mat.tmp))][-(1:3)]%>% as.numeric()
#Do the first step of the calculation
tst <- sbpr(age=ages,
ssbwgt=wa.tmp,
partial=rep(1,length(ages)),
pmat=mat.tmp,
M=m.tmp, # This can just be one value if m assumed fixed.
pF=0, pM=0.5,MSP=30,plus=T,oldest =max(ages), maxF=1, incrF=0.1)
if(locations[j] != "Eastern Georges Bank")
{
if(locations[j] == "Icelandic" & species[i] == "Haddock")
{
M.avg <- 0.2
} else {M.avg <- sum(num.tmp*m.tmp)/sum(num.tmp)}
}
if(locations[j] == "Eastern Georges Bank") { M.avg <- 0.2 }
spr <- tst$F_vs_SPR$SPR[1]
res$SBPR[count]      <- spr
res$M.avg[count]     <- 1-exp(-M.avg)
}
res$Species[count]  <- species[i]
res$Location[count] <- locations[j]
res$Period[count]   <- periods[k]
}
}
}
# Something screwy with logicals above for Icelandic Haddock, so I'll be lazy...
res$M.avg[res$Species=="Haddock" & res$Location == "Iceland"] <- 1-exp(-0.2)
tst
res
M.avg
1-exp(-M.avg)
tst
setwd("D:/Github/ICM/Data/")
if(!require(stringr)){install.packages("stringr"); library(stringr)}
#devtools::install_github("james-thorson/FishLife")
install.packages("remotes")
if(!require(Rcpp)){install.packages("Rcpp"); library(Rcpp)}
remotes::install_github("James-Thorson/FishLife",force=TRUE)
remotes::install_github("James-Thorson/FishLife",force=TRUE)
# species list
species<-read.table("specieslist.txt",header=T)
head(species)
speciesclear<-data.frame(str_split(species$genus.species,"_", simplify = TRUE))[,1:2];colnames(speciesclear)<-c("genus","species")
speciesclear$genus<-as.character(speciesclear$genus)
speciesclear$species<-as.character(speciesclear$species)
dim(speciesclear)
listspecies<-seq(1,nrow(speciesclear),1)
output<-matrix(0,nrow(speciesclear),20)
for (i in listspecies) { Predict <-try(Plot_taxa(Search_species(Genus=as.character(speciesclear$genus[i]),Species=as.character(speciesclear$species[i]))$match_taxonomy),silent = TRUE)
#plot(seq(1,3,1),seq(1,3,1),main=i)
#graphics.off()
output[i,]<-try(Predict[[1]]$Mean_pred,silent = TRUE)
if(output[i,1]==c("Error in Predict[[1]]$Mean_pred : \n  $ operator is invalid for atomic vectors\n")){output[i,]<-"NA"}
else {output[i,]<-output[i,]}
print(paste(round((100*i)/length(listspecies),digits=2),"%"))
}
species<-read.table("specieslist.txt",header=T)
species
head(species)
speciesclear<-data.frame(str_split(species$genus.species,"_", simplify = TRUE))[,1:2];colnames(speciesclear)<-c("genus","species")
library(tidyverse)
# species list
species<-read.table("specieslist.txt",header=T)
head(species)
speciesclear<-data.frame(str_split(species$genus.species,"_", simplify = TRUE))[,1:2];colnames(speciesclear)<-c("genus","species")
speciesclear$genus<-as.character(speciesclear$genus)
speciesclear$species<-as.character(speciesclear$species)
dim(speciesclear)
listspecies<-seq(1,nrow(speciesclear),1)
output<-matrix(0,nrow(speciesclear),20)
for (i in listspecies) { Predict <-try(Plot_taxa(Search_species(Genus=as.character(speciesclear$genus[i]),Species=as.character(speciesclear$species[i]))$match_taxonomy),silent = TRUE)
#plot(seq(1,3,1),seq(1,3,1),main=i)
#graphics.off()
output[i,]<-try(Predict[[1]]$Mean_pred,silent = TRUE)
if(output[i,1]==c("Error in Predict[[1]]$Mean_pred : \n  $ operator is invalid for atomic vectors\n")){output[i,]<-"NA"}
else {output[i,]<-output[i,]}
print(paste(round((100*i)/length(listspecies),digits=2),"%"))
}
output<-data.frame(output)
colnames(output)<-names(Predict[[1]]$Mean_pred)
rownames(output)<-species$genus.species
output
listspecies
i
i=1
i=12
Predict <-try(Plot_taxa(Search_species(Genus=as.character(speciesclear$genus[i]),
Species=as.character(speciesclear$species[i]))$match_taxonomy),silent = TRUE)
Predict
library(FishLife)
remotes::install_github( 'ropensci/rfishbase@fb-21.06', force=TRUE )
library(FishLife)
Predict <-try(Plot_taxa(Search_species(Genus=as.character(speciesclear$genus[i]),
Species=as.character(speciesclear$species[i]))$match_taxonomy),silent = TRUE)
listspecies<-seq(1,nrow(speciesclear),1)
output<-matrix(0,nrow(speciesclear),20)
for (i in listspecies)
{
Predict <-try(Plot_taxa(Search_species(Genus=as.character(speciesclear$genus[i]),
Species=as.character(speciesclear$species[i]))$match_taxonomy),silent = TRUE)
#plot(seq(1,3,1),seq(1,3,1),main=i)
#graphics.off()
output[i,]<-try(Predict[[1]]$Mean_pred,silent = TRUE)
if(output[i,1]==c("Error in Predict[[1]]$Mean_pred : \n  $ operator is invalid for atomic vectors\n")){output[i,]<-"NA"}
else {output[i,]<-output[i,]}
print(paste(round((100*i)/length(listspecies),digits=2),"%"))
}
output<-data.frame(output)
colnames(output)<-names(Predict[[1]]$Mean_pred)
rownames(output)<-species$genus.species
output
?FishLife::Search_species
}
output<-data.frame(output)
colnames(output)<-names(Predict[[1]]$Mean_pred)
rownames(output)<-species$genus.species
colnames(output)<- c("Asymptotic_length","Brody_growth_coefficient","Asymptotic_mass_cm","Maximum_age_year","Age_at_maturity_year",
"Mortality_rate",
"Length_at_maturity_cm",
"Average_Temperature",
"Conditional_recruitment_variance",
"Recruitment_autocorrelation",
"Maximum_annual_spawners_per_spawner",
"SD_of_recruitment",
"Steepness_h",
"logit_Steepness_h",
"Ratio_of_F_msy_and_M",
"Fishing_mortality_rate_at_MSY",
"intrinsic_growth_rate_pop_growth",
"intrinsic_growth_rate",
"ln_Generation_time",
"Geration_time")
Predict
Search_species(Genus=as.character(speciesclear$genus[i]),
Species=as.character(speciesclear$species[i]))$match_taxonomy)
Search_species(Genus=as.character(speciesclear$genus[i]),
Species=as.character(speciesclear$species[i]))
